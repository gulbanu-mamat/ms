# Makefile for Integrated Warehouse Management System with SQLite
# 适用于 MSYS2 环境

# 编译器设置
CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g

# SQLite 和 ncurses 库设置 (MSYS2)
SQLITE_CFLAGS = $(shell pkg-config --cflags sqlite3)
SQLITE_LIBS = $(shell pkg-config --libs sqlite3)
NCURSES_LIBS = -lncurses

# 如果 pkg-config 不可用，使用默认设置
ifeq ($(SQLITE_CFLAGS),)
    SQLITE_CFLAGS = -IC:/msys64/mingw64/include
endif

ifeq ($(SQLITE_LIBS),)
    SQLITE_LIBS = -LC:/msys64/mingw64/lib -lsqlite3
endif

# 目标文件
TARGET = program3

# 源文件 - 包含所有必要的源文件
SOURCES = main.c ui.c goods.c warehouse.c vehicle.c order.c fileio.c sqlite_db.c database_menu.c
OBJECTS = $(SOURCES:.c=.o)

# 头文件依赖
HEADERS = library.h ui.h goods.h warehouse.h vehicle.h order.h fileio.h sqlite_db.h database_menu.h

# 默认目标
all: $(TARGET)

# 编译主程序
$(TARGET): $(OBJECTS)
	@echo "正在链接仓库管理系统..."
	$(CC) $(CFLAGS) -o $@ $^ $(SQLITE_LIBS) $(NCURSES_LIBS)
	@echo "编译完成: $@"

# 编译目标文件
%.o: %.c $(HEADERS)
	@echo "正在编译: $<"
	$(CC) $(CFLAGS) $(SQLITE_CFLAGS) -c $< -o $@

# 清理编译文件
clean:
	@echo "清理编译文件..."
	rm -f $(OBJECTS) $(TARGET) *.exe warehouse_system.db
	@echo "清理完成"

# 运行程序
run: $(TARGET)
	@echo "运行仓库管理系统..."
	./$(TARGET)

# 安装依赖 (for MSYS2)
install-deps:
	@echo "安装依赖库..."
	pacman -S mingw-w64-x86_64-sqlite3 mingw-w64-x86_64-pkg-config mingw-w64-x86_64-ncurses

# 检查依赖安装
check-deps:
	@echo "检查依赖安装状态..."
	@sqlite3 --version || echo "SQLite3 未安装"
	@pkg-config --modversion sqlite3 || echo "pkg-config 未找到 sqlite3"
	@echo "ncurses 库检查完成"

# 显示帮助信息
help:
	@echo "可用的目标:"
	@echo "  all            - 编译完整的仓库管理系统"
	@echo "  clean          - 清理编译文件"
	@echo "  run            - 编译并运行系统"
	@echo "  install-deps   - 安装依赖库 (SQLite3, ncurses)"
	@echo "  check-deps     - 检查依赖安装状态"
	@echo "  help           - 显示此帮助信息"

# 调试版本
debug: CFLAGS += -DDEBUG -g
debug: $(TARGET)

# 发布版本
release: CFLAGS += -O2 -DNDEBUG
release: $(TARGET)

# 测试编译（不链接）
test-compile: $(OBJECTS)
	@echo "所有源文件编译成功！"

.PHONY: all clean run install-deps check-deps help debug release test-compile 